generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  ADMIN
  LIBRARIAN
  READER
}

enum BookCondition {
  NEW
  GOOD
  FAIR
  DAMAGED
  BAD
}

enum LoanStatus {
  ACTIVE
  RETURNED
  OVERDUE
  CANCELLED
}

enum ReservationStatus {
  PENDING
  PICKED_UP
  CANCELED
  EXPIRED
}

model Copy {
  id           Int           @id @default(autoincrement())
  code         String?       @unique
  condition    BookCondition
  reservations Reservation[]
  loans        Loan[]
  Location     Location?     @relation(fields: [locationId], references: [id])
  locationId   Int?
  Publisher    Publisher?    @relation(fields: [publisherId], references: [id])
  publisherId  Int?
  Donation     Donation?     @relation(fields: [donationId], references: [id])
  donationId   Int?
  Book         Book?         @relation(fields: [bookId], references: [id])
  bookId       Int?
}

model Location {
  id         Int     @id @default(autoincrement())
  shelf      String  @db.VarChar(255)
  shelfColor String? @db.VarChar(50)
  shelfLevel String?
  copies     Copy[]
}

model Publisher {
  id          Int     @id @default(autoincrement())
  name        String
  email       String? @unique @db.VarChar(255)
  country     String?
  address     String?
  phoneNumber String? @unique
  website     String? @unique
  copies      Copy[]
}

model Donation {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  description String?
  copies      Copy[]
  Donor       Donor?   @relation(fields: [donorId], references: [id])
  donorId     Int?
}

model Donor {
  id       Int        @id @default(autoincrement())
  name     String
  email    String     @unique @db.VarChar(255)
  donation Donation[]
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  email String? @unique @db.VarChar(255)
  books Book[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  subcategories Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  books      Book[]
  Category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
}

model Book {
  id            Int          @id @default(autoincrement())
  title         String
  pages         Int?
  copies        Copy[]
  authors       Author[]
  Subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int?
}

model Reservation {
  id      Int               @id @default(autoincrement())
  created DateTime          @default(now())
  dueDate DateTime
  status  ReservationStatus
  copies  Copy[]
  User    User?             @relation(fields: [userId], references: [id])
  userId  Int?
}

model Loan {
  id       Int        @id @default(autoincrement())
  loanDate DateTime   @default(now())
  dueDate  DateTime
  status   LoanStatus
  copies   Copy[]
  User     User?      @relation(fields: [userId], references: [id])
  userId   Int?
}

model User {
  id                Int           @id @default(autoincrement())
  dni               String        @unique @db.VarChar(9)
  names             String
  lastName          String
  phoneNumber       String?       @unique @db.VarChar(9)
  password          String
  role              Role
  email             String        @unique @db.VarChar(255)
  emailVerified     Boolean       @default(false)
  verificationToken String?       @unique
  tokenExpiration   DateTime?
  isDisabled        Boolean       @default(false)
  isSuperUser       Boolean       @default(false)
  loans             Loan[]
  reservations      Reservation[]
}
