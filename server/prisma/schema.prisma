generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enums

enum Role {
  ADMIN
  LIBRARIAN
  READER
}

enum BookCondition {
  GOOD
  BAD
}

enum BookStatus {
  AVAILABLE
  RESERVED
}

enum DonationDirection {
  YES
  NO
}

enum ReservationStatus {
  PENDING
  PICKED_UP
  CANCELED
}

// Models

model User {
  id                Int                   @id @default(autoincrement())
  dni               String                @unique @db.VarChar(20)
  email             String                @unique @db.VarChar(255)
  emailVerified     Boolean               @default(false)
  verificationToken String?               @unique @db.VarChar(255)
  tokenExpiration   DateTime?
  names             String                @db.VarChar(255)
  lastName          String                @db.VarChar(255)
  phoneNumber       String?               @db.VarChar(20)
  password          String                @db.VarChar(255)
  role              Role
  reservations      Reservation[]
  donations         Donation[]
  conditionRecords  BookConditionRecord[]
}

model Location {
  id         Int     @id @default(autoincrement())
  shelf      String  @db.VarChar(255)
  shelfColor String? @db.VarChar(50)
  shelfLevel Int?
  books      Book[]
}

model BookConditionRecord {
  id               Int               @id @default(autoincrement())
  condition        BookCondition
  isDecommissioned DonationDirection
  userId           Int?
  user             User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  books            Book[]
}

model BookCategory {
  id            Int               @id @default(autoincrement())
  name          String            @unique @db.VarChar(255)
  subcategories BookSubCategory[]
  templates     BookTemplate[]
}

model BookSubCategory {
  id             Int            @id @default(autoincrement())
  name           String         @unique @db.VarChar(255)
  bookCategoryId Int
  bookCategory   BookCategory   @relation(fields: [bookCategoryId], references: [id], onDelete: Cascade)
  templates      BookTemplate[]
}

model BookTemplate {
  id                Int              @id @default(autoincrement())
  title             String           @db.VarChar(255)
  author            String?          @db.VarChar(255)
  publisher         String?          @db.VarChar(255)
  pages             Int?
  code              String?          @db.VarChar(50)
  categoryId        Int?
  category          BookCategory?    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  bookSubCategoryId Int?
  bookSubCategory   BookSubCategory? @relation(fields: [bookSubCategoryId], references: [id], onDelete: Cascade)
  books             Book[]
}

model Book {
  id           Int                  @id @default(autoincrement())
  templateId   Int
  template     BookTemplate         @relation(fields: [templateId], references: [id], onDelete: Cascade)
  status       BookStatus
  locationId   Int?
  location     Location?            @relation(fields: [locationId], references: [id], onDelete: Cascade)
  conditionId  Int?
  condition    BookConditionRecord? @relation(fields: [conditionId], references: [id], onDelete: Cascade)
  stock        Int?
  donations    Donation[]
  reservations Reservation[]
}

model Reservation {
  id                Int               @id @default(autoincrement())
  reservationDate   DateTime
  pickupDeadline    DateTime?
  reservationStatus ReservationStatus
  bookId            Int
  book              Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  loanDate          DateTime?
  returnDate        DateTime?
  userId            Int?
  user              User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Donation {
  id          Int               @id @default(autoincrement())
  date        DateTime
  donorEntity String            @db.VarChar(255)
  bookId      Int
  book        Book              @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userId      Int?
  user        User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  toLibrary   DonationDirection
}
